{"version":3,"sources":["components/Graph/Node/Node.module.css","components/Graph/Graph.module.css","components/Board/Board.module.css","utility/calc.ts","components/Graph/Node/Node.tsx","data-structures/Queue.ts","data-structures/Stack.ts","algorithms/algorithm.ts","components/Graph/Graph.tsx","configs/readOnly.ts","components/Board/BoardStyles.ts","components/Board/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","calculateAccurateCoords","x1","y1","x2","y2","distance","Math","sqrt","ratio","tempX","tempY","Node","props","node","edges","handleMove","handleEdge","deleteNodeMode","deleteEdgeMode","editEdgeMode","className","styles","nodeGroup","onMouseDown","isVisited","visited","isInShortestPath","shortestPath","cx","x","cy","y","r","id","get","map","edge","directedPath","mpx","mpy","theta","atan2","PI","c1x","cos","c1y","sin","calculateCurve","undirectedPath","textCoord","calculateTextLoc","type","arrow","to","markerWidth","markerHeight","refX","refY","orient","points","onClick","d","directedEdge","markerEnd","weight","edgeText","undirectedEdge","nodeX2","nodeY2","nodeText","Queue","queue","this","item","push","isEmpty","length","shift","Stack","stack","pop","backtrack","prev","endNodeId","visitedOrder","currentNodeId","has","reverse","getSmallestUnvisited","unvisitedSet","smallestUnvisited","forEach","value","key","sort","a","b","getUnvisitedNeighbours","parseInt","newDistance","set","findNeighbours","nodeId","visitedSet","add","Graph","options","selectedEdge","selectedAlgo","setOptions","visualizationSpeed","setVisualizingState","useState","nodes","setNodes","Map","setEdges","isModalOpen","setModalState","setEdge","pathFindingNode","setPathFindingNode","isPathPossible","setPathPossible","currentNode","useRef","currentEdge","nodesTillNow","graph","mockEdge","setMockEdge","useEffect","reset","current","visualizeShortestPath","i","setTimeout","updateNodes","selectStartNode","updatedNodes","visualizeGraph","visitedNodes","fromNode","deleteEdge","editEdge","upgradedEdges","filter","newEdges","upgradedOutgoingEdges","upgradedIncomingEdges","toString","editEdgeWeight","event","canMoveNode","moveNode","canDrawEdge","target","handleNodeMove","nodeX","offsetX","nodeY","offsetY","setAttribute","nextElementSibling","newNodes","updateNodeCoord","newBegEdgePositionsForNode","entries","newList","updateEdgeCoord","addEventListener","handleNodeEnd","removeEventListener","handleArrowMove","arrowX","arrowY","getAttribute","from","handleArrowEnd","baseVal","includes","isEdgeNotPresent","every","isNotCurrentNode","tempX2","tempY2","fromNodeId","toNode","toNodeId","some","undefined","addEdge","selectEndNode","MessageBar","traversal","isMultiline","dismissButtonAriaLabel","text","fontWeight","fontSize","pathfinding","pathError","messageBarType","MessageBarType","error","ref","drawNode","clientX","getBoundingClientRect","left","clientY","top","newNode","addNode","deleteNode","delete","startNode","bfsQueue","Set","front","bfs","dfsStack","dfs","tagName","startNodeId","Infinity","size","dijkstra","mockArrow","Modal","main","minHeight","minWidth","height","scrollableContent","display","isOpen","TextField","fieldGroup","border","min","max","onKeyDown","e","keyCode","onChange","modalButton","edgeOptions","algoOptions","optionButtonStyles","edgeDropdown","title","background","color","borderRadius","dropdownItemSelectedAndDisabled","caretDown","dropdownItem","dropdownItemSelected","algoDropdown","width","Board","setSelectedEdge","setSelectedAlgo","isVisualizing","setVisualizationSpeed","activateOption","option","Object","keys","board","controlPanel","nodeOptions","optionButtons","disabled","icon","Dropdown","dropdownWrapper","placeholder","selectedKey","visualizeControls","Slider","speedSlider","label","titleLabel","valueLabel","inactiveSection","activeSection","backgroundImage","step","miscellaneous","visualizerProgress","ProgressIndicator","itemProgress","padding","graphContainer","initializeIcons","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bc2ba2f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"node\":\"Node_node__2Cbef\",\"common\":\"Node_common__30yaU\",\"directedEdge\":\"Node_directedEdge__WJMid\",\"visited\":\"Node_visited__zJZsq\",\"shortestPath\":\"Node_shortestPath__1vWBN\",\"deleteNodeMode\":\"Node_deleteNodeMode__14SAY\",\"editEdgeMode\":\"Node_editEdgeMode__2FdYs\",\"undirectedEdge\":\"Node_undirectedEdge__2oEGj\",\"deleteEdgeMode\":\"Node_deleteEdgeMode__2X5Ia\",\"nodeText\":\"Node_nodeText__2wrL6\",\"edgeText\":\"Node_edgeText__28eQf\",\"arrow\":\"Node_arrow___KGkP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graph\":\"Graph_graph__3l3QX\",\"mockEdge\":\"Graph_mockEdge__1HiUy\",\"mockArrow\":\"Graph_mockArrow__1TSmV\",\"modalButton\":\"Graph_modalButton__3oOMx\",\"pathError\":\"Graph_pathError__3t8eO\",\"traversal\":\"Graph_traversal__3EU2v\",\"pathfinding\":\"Graph_pathfinding__faZhg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanel\":\"Board_controlPanel__erP7h\",\"nodeOptions\":\"Board_nodeOptions__18MB1\",\"edgeOptions\":\"Board_edgeOptions__r0Fag\",\"miscellaneous\":\"Board_miscellaneous__3CRW8\",\"algorithm\":\"Board_algorithm__m1qpp\",\"visualizeControls\":\"Board_visualizeControls__sW7jh\",\"board\":\"Board_board__1Y7VT\",\"graphContainer\":\"Board_graphContainer__Qq_Cf\",\"icon\":\"Board_icon__3-dTt\",\"optionButtons\":\"Board_optionButtons__3Pt51\",\"speedSlider\":\"Board_speedSlider__2vluo\",\"visualizerProgress\":\"Board_visualizerProgress__2nl_9\"};","export const calculateCurve = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) => {\n  var mpx = (x2 + x1) * 0.5;\n  var mpy = (y2 + y1) * 0.5;\n\n  // angle of perpendicular to line:\n  var theta = Math.atan2(y2 - y1, x2 - x1) - Math.PI / 2;\n\n  // distance of control point from mid-point of line:\n  var offset = 30;\n\n  // location of control point:\n  var c1x = mpx + offset * Math.cos(theta);\n  var c1y = mpy + offset * Math.sin(theta);\n  let directedPath = `M${x1} ${y1} Q${c1x} ${c1y} ${x2} ${y2}`;\n  return directedPath;\n};\nexport const calculateTextLoc = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) => {\n  var mpx = (x2 + x1) * 0.5;\n  var mpy = (y2 + y1) * 0.5;\n\n  // angle of perpendicular to line:\n  var theta = Math.atan2(y2 - y1, x2 - x1) - Math.PI / 2;\n\n  // distance of control point from mid-point of line:\n  var offset = 30;\n\n  // location of control point:\n  var c1x = mpx + offset * Math.cos(theta);\n  var c1y = mpy + offset * Math.sin(theta);\n  return { c1x, c1y };\n};\n//calculates accurate x2,y2 for the edge to just intersect the node\nexport const calculateAccurateCoords = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) => {\n  let distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  let d2 = distance - 30;\n  let ratio = d2 / distance;\n  let dx: any = (x2 - x1) * ratio;\n  let dy: any = (y2 - y1) * ratio;\n  let tempX = x1 + dx;\n  let tempY = y1 + dy;\n  return { tempX, tempY };\n};\n","import React from \"react\";\nimport styles from \"./Node.module.css\";\nimport { calculateCurve, calculateTextLoc } from \"../../../utility/calc\";\nexport const Node = (props: any) => {\n  const {\n    node,\n    edges,\n    handleMove,\n    handleEdge,\n    deleteNodeMode,\n    deleteEdgeMode,\n    editEdgeMode,\n  } = props;\n  return (\n    <g className={styles.nodeGroup}>\n      <circle\n        onMouseDown={handleMove}\n        className={`${styles.node} ${deleteNodeMode && styles.deleteNodeMode} ${\n          node.isVisited && styles.visited\n        } ${node.isInShortestPath && styles.shortestPath}`}\n        cx={node.x}\n        cy={node.y}\n        r={node.r}\n        id={node.id}\n      ></circle>\n      {edges &&\n        edges.get(node.id).map((edge: any) => {\n          let directedPath = calculateCurve(edge.x1, edge.y1, edge.x2, edge.y2);\n          let undirectedPath = `M${edge.x1},${edge.y1} L${edge.x2},${edge.y2}`;\n          let textCoord = calculateTextLoc(edge.x1, edge.y1, edge.x2, edge.y2);\n          return (\n            <>\n              {edge.type === \"directed\" && (\n                <>\n                  <marker\n                    className={styles.arrow}\n                    id={`arrowhead${node.id}${edge.to}`}\n                    markerWidth=\"10\"\n                    markerHeight=\"7\"\n                    refX=\"9.7\"\n                    refY=\"3.5\"\n                    orient=\"auto\"\n                  >\n                    <polygon points=\"0 0, 10 3.5, 0 7\" />\n                  </marker>\n                  <path\n                    id={`${node.id}${edge.to}`}\n                    onClick={() => handleEdge(edge, node)}\n                    d={directedPath}\n                    className={`${styles.directedEdge} ${\n                      deleteEdgeMode && styles.deleteEdgeMode\n                    } ${editEdgeMode && styles.editEdgeMode}`}\n                    markerEnd={`url(#arrowhead${node.id}${edge.to})`}\n                  >\n                    dsds\n                  </path>\n                  {edge.weight && (\n                    <text\n                      className={styles.edgeText}\n                      x={textCoord.c1x}\n                      y={textCoord.c1y + 7}\n                    >\n                      {edge.weight}\n                    </text>\n                  )}\n                  })}\n                </>\n              )}\n\n              {edge.type === \"undirected\" && (\n                <>\n                  <path\n                    d={undirectedPath}\n                    id={`${node.id}${edge.to}`}\n                    onClick={() => handleEdge(edge, node)}\n                    className={`${styles.undirectedEdge} ${\n                      deleteEdgeMode && styles.deleteEdgeMode\n                    } ${editEdgeMode && styles.editEdgeMode} `}\n                  ></path>\n                  {edge.weight && (\n                    <text\n                      className={styles.edgeText}\n                      x={(edge.x1 + edge.nodeX2) / 2}\n                      y={(edge.y1 + edge.nodeY2) / 2 - 5}\n                    >\n                      {edge.weight}\n                    </text>\n                  )}\n                </>\n              )}\n            </>\n          );\n        })}\n      <text className={styles.nodeText} x={node.x} y={node.y + 5}>\n        {node.id}\n      </text>\n    </g>\n  );\n};\n","export class Queue {\n  queue: Array<any>;\n  constructor() {\n    this.queue = [];\n  }\n  push(item: any) {\n    this.queue.push(item);\n  }\n  front() {\n    return !this.isEmpty() ? this.queue[0] : -1;\n  }\n  back() {\n    return !this.isEmpty() ? this.queue[this.queue.length - 1] : -1;\n  }\n  pop() {\n    if (!this.isEmpty()) {\n      this.queue.shift();\n    }\n  }\n  isEmpty() {\n    return this.queue.length === 0;\n  }\n}\n","export class Stack {\n  stack: Array<any>;\n  constructor() {\n    this.stack = [];\n  }\n  push(item: any) {\n    this.stack.push(item);\n  }\n  top() {\n    return !this.isEmpty() ? this.stack[this.stack.length - 1] : -1;\n  }\n  pop() {\n    if (!this.isEmpty()) {\n      this.stack.pop();\n    }\n  }\n  isEmpty() {\n    return this.stack.length === 0;\n  }\n}\n","import { Queue } from \"../data-structures/Queue\";\nimport { Stack } from \"../data-structures/Stack\";\nexport const bfs = (edges: any, startNode: any) => {\n  const bfsQueue = new Queue();\n  const visitedNodes = [];\n  const visitedSet = new Set();\n  bfsQueue.push(startNode);\n  let newEdges = new Map(edges);\n  while (!bfsQueue.isEmpty()) {\n    let nodeId = bfsQueue.front();\n    bfsQueue.pop();\n    if (!visitedSet.has(nodeId)) {\n      visitedNodes.push(nodeId);\n      const neighbours = findNeighbours(nodeId, newEdges, visitedSet);\n      neighbours.forEach((id: any) => {\n        bfsQueue.push(id);\n      });\n    }\n  }\n  return visitedNodes;\n};\n\nexport const dfs = (edges: any, startNode: any) => {\n  const dfsStack = new Stack();\n  const visitedNodes = [];\n  const visitedSet = new Set();\n  dfsStack.push(startNode);\n  let newEdges = new Map(edges);\n  while (!dfsStack.isEmpty()) {\n    let nodeId = dfsStack.top();\n    dfsStack.pop();\n    if (!visitedSet.has(nodeId)) {\n      visitedNodes.push(nodeId);\n      const neighbours = findNeighbours(nodeId, newEdges, visitedSet);\n      neighbours.forEach((id: any) => {\n        dfsStack.push(id);\n      });\n    }\n  }\n  return visitedNodes;\n};\n\nexport const dijkstra = (\n  edges: any,\n  startNodeId: any,\n  endNodeId: any,\n  nodes: any\n) => {\n  if (startNodeId === endNodeId)\n    return { shortestPath: [startNodeId], visitedNodes: [startNodeId] };\n  let newEdges = new Map(edges);\n  let newNodes = [...nodes];\n  let distance = new Map();\n  let prev = new Map();\n  let unvisitedSet = new Set();\n  let visitedNodes: any = [];\n  newNodes.forEach((node: any) => {\n    distance.set(node.id, Infinity);\n    unvisitedSet.add(node.id);\n  });\n  distance.set(startNodeId, 0);\n  let currentNodeId = startNodeId;\n  visitedNodes.push(currentNodeId);\n  unvisitedSet.delete(currentNodeId);\n  while (unvisitedSet.size !== 0) {\n    getUnvisitedNeighbours(\n      currentNodeId,\n      newEdges,\n      distance,\n      unvisitedSet,\n      prev\n    );\n    currentNodeId = getSmallestUnvisited(distance, unvisitedSet);\n    if (distance.get(currentNodeId) === Infinity) {\n      return {\n        shortestPath: [],\n        visitedNodes: visitedNodes,\n      };\n    }\n    visitedNodes.push(currentNodeId);\n    unvisitedSet.delete(currentNodeId);\n    if (currentNodeId === endNodeId)\n      return {\n        shortestPath: backtrack(prev, endNodeId),\n        visitedNodes: visitedNodes,\n      };\n  }\n};\nconst backtrack = (prev: Map<any, any>, endNodeId: any) => {\n  const visitedOrder = [];\n  let currentNodeId = endNodeId;\n  visitedOrder.push(currentNodeId);\n  while (prev.has(currentNodeId)) {\n    currentNodeId = prev.get(currentNodeId);\n    visitedOrder.push(currentNodeId);\n  }\n  return visitedOrder.reverse();\n};\nconst getSmallestUnvisited = (\n  distance: Map<any, any>,\n  unvisitedSet: Set<any>\n) => {\n  let smallestUnvisited: any = [];\n  distance.forEach((value: any, key: any) => {\n    if (unvisitedSet.has(key)) {\n      smallestUnvisited.push(key);\n    }\n  });\n  return smallestUnvisited.sort(\n    (a: number, b: number) => distance.get(a) - distance.get(b)\n  )[0];\n};\nconst getUnvisitedNeighbours = (\n  currentNodeId: any,\n  edges: any,\n  distance: any,\n  unvisitedSet: Set<any>,\n  prev: Map<any, any>\n) => {\n  if (edges.get(currentNodeId)) {\n    edges.get(currentNodeId).forEach((edge: any) => {\n      if (unvisitedSet.has(parseInt(edge.to))) {\n        let newDistance = distance.get(currentNodeId) + edge.weight;\n        if (newDistance < distance.get(parseInt(edge.to))) {\n          distance.set(parseInt(edge.to), newDistance);\n          prev.set(parseInt(edge.to), currentNodeId);\n        }\n      }\n    });\n  }\n};\n\nconst findNeighbours = (nodeId: any, edges: any, visitedSet: any) => {\n  if (!visitedSet.has(nodeId)) {\n    visitedSet.add(nodeId);\n    return edges.get(nodeId).map((edge: any) => {\n      return parseInt(edge.to);\n    });\n  }\n  return [];\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Node } from \"../Graph/Node/Node\";\nimport styles from \"./Graph.module.css\";\nimport { calculateAccurateCoords } from \"../../utility/calc\";\nimport { Modal, TextField, MessageBar, MessageBarType } from \"@fluentui/react\";\nimport { bfs, dfs, dijkstra } from \"../../algorithms/algorithm\";\nexport const Graph = (props: any) => {\n  const {\n    options,\n    selectedEdge,\n    selectedAlgo,\n    setOptions,\n    visualizationSpeed,\n    setVisualizingState,\n  } = props;\n  const [nodes, setNodes] = useState<any>([]);\n  const [edges, setEdges] = useState<any>(new Map());\n  const [isModalOpen, setModalState] = useState(false);\n  const [edge, setEdge] = useState<any>();\n  const [pathFindingNode, setPathFindingNode] = useState<any>(null);\n  const [isPathPossible, setPathPossible] = useState(true);\n  const currentNode = useRef<any>();\n  const currentEdge = useRef<any>();\n  const nodesTillNow = useRef(0);\n  const graph = useRef<any>();\n  const [mockEdge, setMockEdge] = useState<any>(null);\n\n  useEffect(() => {\n    if (options.reset) {\n      setNodes([]);\n      setEdges(new Map());\n      nodesTillNow.current = 0;\n    }\n  }, [options.reset]);\n\n  useEffect(() => {\n    setPathFindingNode(null);\n  }, [options]);\n\n  const addNode = (event: any) => {\n    let nodeX = event.clientX - event.target.getBoundingClientRect().left;\n    let nodeY = event.clientY - event.target.getBoundingClientRect().top;\n    nodesTillNow.current += 1;\n    let newNode = {\n      id: nodesTillNow.current,\n      x: nodeX,\n      y: nodeY,\n      r: 30,\n    };\n    edges.set(nodesTillNow.current, []);\n    setEdges(edges);\n    setNodes([...nodes, newNode]);\n  };\n  const deleteNode = (event: any) => {\n    let newNodes = nodes.filter(\n      (node: any) => node.id !== parseInt(event.target.id)\n    );\n    for (const [node, list] of edges.entries()) {\n      let newList = list.filter((edge: any) => {\n        if (event.target.id !== edge.to) {\n          return edge;\n        }\n      });\n      edges.set(node, newList);\n    }\n    edges.delete(parseInt(event.target.id));\n    setEdges(edges);\n    setNodes(newNodes);\n  };\n  const visualizeShortestPath = (shortestPath: any) => {\n    for (let i = 0; i <= shortestPath.length; i++) {\n      if (i === shortestPath.length) {\n        setTimeout(() => {\n          let updateNodes = nodes.map((node: any) => {\n            return { ...node, isInShortestPath: false, isVisited: false };\n          });\n          setNodes(updateNodes);\n          setOptions({ ...options, selectStartNode: true });\n          setVisualizingState(false);\n        }, visualizationSpeed * i);\n        return;\n      }\n      setTimeout(() => {\n        const currentNodeId = shortestPath[i];\n        let updatedNodes = [...nodes];\n        updatedNodes.forEach((node: any) => {\n          if (node.id === currentNodeId) {\n            node.isInShortestPath = true;\n            node.isVisited = false;\n          }\n        });\n        setNodes(updatedNodes);\n      }, visualizationSpeed * i);\n    }\n  };\n  const visualizeGraph = (visitedNodes: any, shortestPath: any = []) => {\n    setOptions({ ...options, selectStartNode: false });\n    setVisualizingState(true);\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          visualizeShortestPath(shortestPath);\n        }, visualizationSpeed * i);\n        return;\n      }\n      setTimeout(() => {\n        const currentNodeId = visitedNodes[i];\n        let updatedNodes = [...nodes];\n        updatedNodes.forEach((node: any) => {\n          if (node.id === currentNodeId) {\n            node.isVisited = true;\n          }\n        });\n        setNodes(updatedNodes);\n      }, visualizationSpeed * i);\n    }\n  };\n  const handleSelect = (event: any) => {\n    if (\n      options.drawNode &&\n      !event.target?.className?.baseVal?.includes(\"Node\")\n    ) {\n      addNode(event);\n    } else if (\n      options.deleteNode &&\n      event.target?.className?.baseVal?.includes(\"Node\")\n    ) {\n      deleteNode(event);\n    } else if (\n      options.selectStartNode &&\n      !options.selectEndNode &&\n      event.target?.className?.baseVal?.includes(\"Node\")\n    ) {\n      const startNode = nodes.filter(\n        (node: any) => node.id === parseInt(event.target.id)\n      )[0];\n      if (startNode && startNode.id) {\n        if (selectedAlgo.key === \"bfs\") {\n          let visitedNodes = bfs(edges, startNode.id);\n          visualizeGraph(visitedNodes);\n        } else if (selectedAlgo.key === \"dfs\") {\n          let visitedNodes = dfs(edges, startNode.id);\n          visualizeGraph(visitedNodes);\n        }\n      }\n    } else if (\n      options.selectStartNode &&\n      options.selectEndNode &&\n      event.target?.className?.baseVal?.includes(\"Node\") &&\n      event.target.tagName === \"circle\"\n    ) {\n      if (!pathFindingNode) {\n        setPathFindingNode(parseInt(event.target.id));\n      } else {\n        let { shortestPath, visitedNodes }: any = dijkstra(\n          edges,\n          pathFindingNode,\n          parseInt(event.target.id),\n          nodes\n        );\n        if (shortestPath.length !== 0) {\n          visualizeGraph(visitedNodes, shortestPath);\n        } else {\n          setPathPossible(false);\n          setTimeout(() => {\n            setPathPossible(true);\n          }, 2500);\n        }\n        setPathFindingNode(null);\n      }\n    }\n  };\n\n  //updates node coordinates when moving it\n  const updateNodeCoord = (x: number, y: number) => {\n    let newNodes = nodes.map((node: any) => {\n      if (node.id === parseInt(currentNode.current.id)) {\n        return { ...node, x, y };\n      }\n      return node;\n    });\n    setNodes(newNodes);\n  };\n  //updates edge coordinates when moving nodes\n  const updateEdgeCoord = (x: number, y: number) => {\n    let newBegEdgePositionsForNode = edges\n      .get(parseInt(currentNode.current.id))\n      .map((edge: any) => {\n        let { tempX, tempY } = calculateAccurateCoords(\n          x,\n          y,\n          edge.nodeX2,\n          edge.nodeY2\n        );\n        return { ...edge, x1: x, y1: y, x2: tempX, y2: tempY };\n      });\n    edges.set(parseInt(currentNode.current.id), newBegEdgePositionsForNode);\n    for (const [node, list] of edges.entries()) {\n      let newList = list.map((edge: any) => {\n        if (currentNode.current.id === edge.to) {\n          let { tempX, tempY } = calculateAccurateCoords(\n            edge.x1,\n            edge.y1,\n            edge.nodeX2,\n            edge.nodeY2\n          );\n          return { ...edge, x2: tempX, y2: tempY, nodeX2: x, nodeY2: y };\n        }\n        return edge;\n      });\n      edges.set(node, newList);\n    }\n    setEdges(edges);\n  };\n\n  const addEdge = (event: any) => {\n    if (event.target?.className?.baseVal?.includes(\"node\")) {\n      if (currentEdge.current) {\n        let x1 = currentEdge.current.x1;\n        let y1 = currentEdge.current.y1;\n        let x2 = parseInt(event.target.getAttribute(\"cx\"));\n        let y2 = parseInt(event.target.getAttribute(\"cy\"));\n        let nodeX2 = x2;\n        let nodeY2 = y2;\n        currentEdge.current.to = event.target.id;\n        const isEdgeNotPresent =\n          edges.get(parseInt(currentEdge.current.from)).length !== 0\n            ? edges\n                .get(parseInt(currentEdge.current.from))\n                .every((edge: any) => edge.to !== currentEdge.current.to)\n            : true;\n        const isNotCurrentNode =\n          currentEdge.current.from !== currentEdge.current.to;\n        const isEdgePossible = isEdgeNotPresent && isNotCurrentNode;\n        if (isEdgePossible) {\n          if (selectedEdge.key === \"directed\") {\n            let { tempX: tempX2, tempY: tempY2 } = calculateAccurateCoords(\n              x1,\n              y1,\n              x2,\n              y2\n            );\n            const fromNodeId = parseInt(currentEdge.current.from);\n            let { from, ...toNode } = currentEdge.current;\n            toNode.x2 = tempX2;\n            toNode.y2 = tempY2;\n            toNode.nodeX2 = nodeX2;\n            toNode.nodeY2 = nodeY2;\n            toNode.type = \"directed\";\n            edges.get(fromNodeId).push(toNode);\n          } else if (selectedEdge.key === \"undirected\") {\n            const fromNodeId = parseInt(currentEdge.current.from);\n            const toNodeId = parseInt(currentEdge.current.to);\n            const isUndirectedEdgeNotPossible =\n              edges\n                .get(fromNodeId)\n                .some((edge: any) => parseInt(edge.to) === toNodeId) ||\n              edges\n                .get(toNodeId)\n                .some((edge: any) => parseInt(edge.to) === fromNodeId);\n            if (!isUndirectedEdgeNotPossible) {\n              let { tempX: tempX2, tempY: tempY2 } = calculateAccurateCoords(\n                x1,\n                y1,\n                x2,\n                y2\n              );\n              let { from, ...toNode } = currentEdge.current;\n              toNode.x2 = tempX2;\n              toNode.y2 = tempY2;\n              toNode.nodeX2 = nodeX2;\n              toNode.nodeY2 = nodeY2;\n              toNode.type = \"undirected\";\n              edges.get(fromNodeId).push(toNode);\n              let { tempX: tempX1, tempY: tempY1 } = calculateAccurateCoords(\n                x2,\n                y2,\n                x1,\n                y1\n              );\n              let fromNode = {\n                x1: x2,\n                y1: y2,\n                x2: tempX1,\n                y2: tempY1,\n                nodeX2: x1,\n                nodeY2: y1,\n                to: currentEdge.current.from,\n                type: \"undirected\",\n                weight: currentEdge.current.weight,\n              };\n              edges.get(toNodeId).push(fromNode);\n            }\n          }\n          setEdges(edges);\n        }\n      }\n    }\n    setMockEdge(null);\n    currentEdge.current = undefined;\n  };\n  const handleEdge = (edge: any, fromNode: any) => {\n    if (options.deleteEdge) {\n      deleteEdge(edge, fromNode.id);\n    } else if (options.editEdge) {\n      editEdge(edge, fromNode);\n    }\n  };\n  const deleteEdge = (currentEdge: any, fromNode: number) => {\n    if (currentEdge.type === \"directed\") {\n      let upgradedEdges = edges\n        .get(fromNode)\n        .filter((edge: any) => edge.to !== currentEdge.to);\n      let newEdges = new Map(edges);\n      newEdges.set(fromNode, upgradedEdges);\n      setEdges(newEdges);\n    } else if (currentEdge.type === \"undirected\") {\n      let upgradedOutgoingEdges = edges\n        .get(fromNode)\n        .filter((edge: any) => edge.to !== currentEdge.to);\n      let upgradedIncomingEdges = edges\n        .get(parseInt(currentEdge.to))\n        .filter((edge: any) => edge.to !== fromNode.toString());\n      let newEdges = new Map(edges);\n      newEdges.set(fromNode, upgradedOutgoingEdges);\n      newEdges.set(parseInt(currentEdge.to), upgradedIncomingEdges);\n      setEdges(newEdges);\n    }\n  };\n  const editEdge = (edge: any, fromNode: any) => {\n    currentNode.current = { ...fromNode };\n    setEdge(edge);\n    setModalState(true);\n  };\n  const editEdgeWeight = () => {\n    let currentEdge = { ...edge };\n    if (edge.type === \"directed\") {\n      let upgradedEdges = edges.get(currentNode.current.id).map((edge: any) => {\n        if (edge.to === currentEdge.to) {\n          return { ...edge, weight: currentEdge.weight };\n        }\n        return edge;\n      });\n      let newEdges = new Map(edges);\n      newEdges.set(currentNode.current.id, upgradedEdges);\n      setEdges(newEdges);\n    } else if (edge.type === \"undirected\") {\n      let upgradedOutgoingEdges = edges\n        .get(currentNode.current.id)\n        .map((edge: any) => {\n          if (edge.to === currentEdge.to) {\n            return { ...edge, weight: currentEdge.weight };\n          }\n          return edge;\n        });\n      let upgradedIncomingEdges = edges\n        .get(parseInt(currentEdge.to))\n        .map((edge: any) => {\n          if (edge.to === currentNode.current.id.toString()) {\n            return { ...edge, weight: currentEdge.weight };\n          }\n          return edge;\n        });\n      let newEdges = new Map(edges);\n      newEdges.set(currentNode.current.id, upgradedOutgoingEdges);\n      newEdges.set(parseInt(currentEdge.to), upgradedIncomingEdges);\n      setEdges(newEdges);\n    }\n    setModalState(false);\n  };\n  const handleMove = (event: any) => {\n    let canMoveNode = options.moveNode;\n    let canDrawEdge =\n      selectedEdge.key &&\n      (selectedEdge.key === \"directed\" || selectedEdge.key === \"undirected\");\n    if (canMoveNode) {\n      currentNode.current = event.target;\n      const handleNodeMove = (event: any) => {\n        let nodeX = event.offsetX;\n        let nodeY = event.offsetY;\n        currentNode.current.setAttribute(\"cx\", nodeX);\n        currentNode.current.setAttribute(\"cy\", nodeY);\n        currentNode.current.nextElementSibling.setAttribute(\"x\", nodeX);\n        currentNode.current.nextElementSibling.setAttribute(\"y\", nodeY + 5);\n        updateNodeCoord(nodeX, nodeY);\n        updateEdgeCoord(nodeX, nodeY);\n      };\n      const handleNodeEnd = (event: any) => {\n        graph.current.removeEventListener(\"mousemove\", handleNodeMove);\n        graph.current.removeEventListener(\"mouseup\", handleNodeEnd);\n      };\n      graph.current.addEventListener(\"mousemove\", handleNodeMove);\n      graph.current.addEventListener(\"mouseup\", handleNodeEnd);\n    } else if (canDrawEdge) {\n      currentNode.current = event.target;\n      const handleArrowMove = (event: any) => {\n        let arrowX = event.offsetX;\n        let arrowY = event.offsetY;\n        currentEdge.current = {\n          x1: parseInt(currentNode.current.getAttribute(\"cx\")),\n          y1: parseInt(currentNode.current.getAttribute(\"cy\")),\n          x2: arrowX,\n          y2: arrowY,\n          from: currentNode.current.id,\n          to: null,\n          weight: 0,\n        };\n        setMockEdge(currentEdge.current);\n      };\n      const handleArrowEnd = (event: any) => {\n        addEdge(event);\n        graph.current.removeEventListener(\"mousemove\", handleArrowMove);\n        graph.current.removeEventListener(\"mouseup\", handleArrowEnd);\n      };\n      graph.current.addEventListener(\"mousemove\", handleArrowMove);\n      graph.current.addEventListener(\"mouseup\", handleArrowEnd);\n    }\n  };\n  return (\n    <>\n      {options.selectStartNode && !options.selectEndNode && (\n        <MessageBar\n          className={styles.traversal}\n          isMultiline={false}\n          dismissButtonAriaLabel=\"Close\"\n          styles={{ text: { fontWeight: \"bold\", fontSize: \"14px\" } }}\n        >\n          Click on any node to begin the traversal.\n        </MessageBar>\n      )}\n      {options.selectStartNode &&\n        options.selectEndNode &&\n        (isPathPossible ? (\n          <MessageBar\n            className={styles.pathfinding}\n            isMultiline={false}\n            dismissButtonAriaLabel=\"Close\"\n            styles={{ text: { fontWeight: \"bold\", fontSize: \"14px\" } }}\n          >\n            Select a starting node and ending node to visualize the pathfinding\n            algorithm.\n          </MessageBar>\n        ) : (\n          <MessageBar\n            className={styles.pathError}\n            messageBarType={MessageBarType.error}\n            isMultiline={false}\n            dismissButtonAriaLabel=\"Close\"\n            styles={{ text: { fontWeight: \"bold\", fontSize: \"14px\" } }}\n          >\n            Path is not possible for the given vertices.\n          </MessageBar>\n        ))}\n      <svg ref={graph} className={styles.graph} onClick={handleSelect}>\n        {nodes.map((node: any) => (\n          <Node\n            handleEdge={handleEdge}\n            handleMove={handleMove}\n            key={node.id}\n            node={node}\n            edges={edges}\n            deleteEdgeMode={options.deleteEdge}\n            deleteNodeMode={options.deleteNode}\n            editEdgeMode={options.editEdge}\n          />\n        ))}\n        {mockEdge && (\n          <>\n            {selectedEdge.key === \"directed\" && (\n              <marker\n                className={styles.mockArrow}\n                id=\"mockArrowHead\"\n                markerWidth=\"10\"\n                markerHeight=\"7\"\n                refX=\"0\"\n                refY=\"3.5\"\n                orient=\"auto\"\n              >\n                <polygon points=\"0 0, 10 3.5, 0 7\" />\n              </marker>\n            )}\n            <line\n              className={styles.mockEdge}\n              x1={mockEdge.x1}\n              y1={mockEdge.y1}\n              x2={mockEdge.x2}\n              y2={mockEdge.y2}\n              markerEnd=\"url(#mockArrowHead)\"\n            ></line>\n          </>\n        )}\n      </svg>\n      <Modal\n        styles={{\n          main: { minHeight: \"0px\", minWidth: \"0px\", height: \"31px\" },\n          scrollableContent: { display: \"flex\" },\n        }}\n        isOpen={isModalOpen}\n      >\n        {edge && edge.weight !== null && (\n          <TextField\n            styles={{ fieldGroup: { border: \"none\" } }}\n            type=\"number\"\n            min={0}\n            max={500}\n            value={edge.weight}\n            onKeyDown={(e: any) => {\n              if (e.keyCode === 13) {\n                editEdgeWeight();\n              }\n            }}\n            onChange={(e: any) => {\n              if (\n                parseInt(e.target.value) >= 0 &&\n                parseInt(e.target.value) <= 500\n              ) {\n                setEdge({ ...edge, weight: parseInt(e.target.value) });\n              }\n            }}\n          />\n        )}\n\n        <button className={styles.modalButton} onClick={editEdgeWeight}>\n          Set Weight\n        </button>\n      </Modal>\n    </>\n  );\n};\n","import { IDropdownOption } from \"@fluentui/react\";\nexport const edgeOptions: Array<IDropdownOption> = [\n  {\n    key: \"select\",\n    text: \"Select Edge\",\n  },\n  {\n    key: \"directed\",\n    text: \"Directed\",\n  },\n  {\n    key: \"undirected\",\n    text: \"Undirected\",\n  },\n];\nexport const algoOptions: Array<IDropdownOption> = [\n  {\n    key: \"select\",\n    text: \"Select Algorithm\",\n  },\n  {\n    key: \"bfs\",\n    text: \"Breath First Search Traversal\",\n  },\n  {\n    key: \"dfs\",\n    text: \"Depth First Search Traversal\",\n  },\n  {\n    key: \"dijkstra\",\n    text: \"Dijkstra PathFinding Algorithm\",\n  },\n];\n","export const optionButtonStyles = {\n  edgeDropdown: {\n    title: {\n      background: \"transparent\",\n      color: \"white !important\",\n      borderRadius: \"5px\",\n      border: \"2px solid white !important\",\n    },\n    dropdownItemSelectedAndDisabled: {\n      color: \"white\",\n    },\n    caretDown: {\n      color: \"white !important\",\n    },\n\n    dropdownItem: {\n      background: \"rgb(84, 99, 173)  !important\",\n      color: \"white\",\n      border: \"none\",\n    },\n    dropdownItemSelected: {\n      background: \"#4144a0 !important\",\n      color: \"white\",\n      border: \"none\",\n    },\n  },\n  algoDropdown: {\n    title: {\n      background: \"transparent\",\n      color: \"white !important\",\n      borderRadius: \"5px\",\n      border: \"2px solid white !important\",\n      width: \"200px\",\n    },\n    dropdownItemSelectedAndDisabled: {\n      color: \"white\",\n    },\n    caretDown: {\n      color: \"white !important\",\n    },\n\n    dropdownItem: {\n      background: \"rgb(84, 99, 173)  !important\",\n      color: \"white\",\n      border: \"none\",\n    },\n    dropdownItemSelected: {\n      background: \"#4144a0 !important\",\n      color: \"white\",\n      border: \"none\",\n    },\n  },\n};\n","import React, { useRef, useState } from \"react\";\nimport { Graph } from \"../Graph/Graph\";\nimport styles from \"./Board.module.css\";\nimport {\n  Dropdown,\n  IDropdownOption,\n  Slider,\n  ProgressIndicator,\n} from \"@fluentui/react\";\nimport { edgeOptions, algoOptions } from \"../../configs/readOnly\";\nimport { optionButtonStyles } from \"./BoardStyles\";\n\nexport const Board = (props: any) => {\n  //states,props and refs\n  const [options, setOptions] = useState<any>({\n    drawNode: true,\n    moveNode: false,\n    deleteNode: false,\n    reset: false,\n    editEdge: false,\n    deleteEdge: false,\n    selectStartNode: false,\n    selectEndNode: false,\n  });\n\n  const [selectedEdge, setSelectedEdge] = useState<any>();\n  const [selectedAlgo, setSelectedAlgo] = useState<any>();\n  const [isVisualizing, setVisualizingState] = useState<any>();\n  const [visualizationSpeed, setVisualizationSpeed] = useState<any>(250);\n  //Activates the desired board option\n  const activateOption = (option: string | number) => {\n    Object.keys(options).forEach((key: any) => {\n      if (key === option) {\n        options[key] = true;\n      } else {\n        options[key] = false;\n      }\n    });\n    setSelectedEdge({ key: \"select\", text: \"Select Edge\" });\n    setSelectedAlgo({ key: \"select\", text: \"Select Algorithm\" });\n    setOptions(options);\n  };\n  const handleEdgeOptions = (\n    event: any,\n    option: IDropdownOption | undefined\n  ) => {\n    setOptions({\n      drawNode: false,\n      moveNode: false,\n      deleteNode: false,\n      reset: false,\n      editEdge: false,\n      deleteEdge: false,\n      selectStartNode: false,\n      selectEndNode: false,\n    });\n    setSelectedAlgo({ key: \"select\", text: \"Select Algorithm\" });\n    setSelectedEdge(option);\n  };\n  const handleAlgoOptions = (\n    event: any,\n    option: IDropdownOption | undefined\n  ) => {\n    // setOptions({\n    //   drawNode: false,\n    //   moveNode: false,\n    //   deleteNode: false,\n    //   reset: false,\n    //   editEdge: false,\n    //   deleteEdge: false,\n    // });\n    setSelectedAlgo(option);\n    setSelectedEdge({ key: \"select\", text: \"Select Edge\" });\n    if (option?.key === \"select\") {\n      setOptions({\n        selectStartNode: false,\n        selectEndNode: false,\n        editEdge: false,\n        deleteEdge: false,\n        drawNode: false,\n        moveNode: false,\n        deleteNode: false,\n        reset: false,\n      });\n    } else if (option?.key === \"bfs\" || option?.key === \"dfs\") {\n      setOptions({\n        selectStartNode: true,\n        selectEndNode: false,\n        editEdge: false,\n        deleteEdge: false,\n        drawNode: false,\n        moveNode: false,\n        deleteNode: false,\n        reset: false,\n      });\n    } else {\n      setOptions({\n        selectStartNode: true,\n        selectEndNode: true,\n        editEdge: false,\n        deleteEdge: false,\n        drawNode: false,\n        moveNode: false,\n        deleteNode: false,\n        reset: false,\n      });\n    }\n  };\n  return (\n    <>\n      <div className={styles.board}>\n        <div className={styles.controlPanel}>\n          <div className={styles.nodeOptions}>\n            <button\n              className={styles.optionButtons}\n              onClick={() => activateOption(\"drawNode\")}\n              disabled={isVisualizing}\n            >\n              <i className={`${styles.icon} fas fa-circle`}></i>\n              Draw Node\n            </button>\n            <button\n              className={styles.optionButtons}\n              onClick={() => activateOption(\"moveNode\")}\n              disabled={isVisualizing}\n            >\n              <i className={`${styles.icon} fas fa-arrows-alt`}></i>\n              Move Node\n            </button>\n            <button\n              className={styles.optionButtons}\n              onClick={() => activateOption(\"deleteNode\")}\n              disabled={isVisualizing}\n            >\n              <i className={`${styles.icon} fas fa-trash`}></i>\n              Delete Node\n            </button>\n          </div>\n          <div className={styles.edgeOptions}>\n            <Dropdown\n              className={styles.dropdownWrapper}\n              options={edgeOptions}\n              styles={optionButtonStyles.edgeDropdown}\n              placeholder=\"Select Edge\"\n              selectedKey={selectedEdge && selectedEdge.key}\n              onChange={handleEdgeOptions}\n              disabled={isVisualizing}\n            />\n            <button\n              className={styles.optionButtons}\n              onClick={() => activateOption(\"editEdge\")}\n              disabled={isVisualizing}\n            >\n              <i className={`${styles.icon} fas fa-pen`}></i>\n              Edit Edge\n            </button>\n            <button\n              className={styles.optionButtons}\n              onClick={() => activateOption(\"deleteEdge\")}\n              disabled={isVisualizing}\n            >\n              <i className={`${styles.icon} fas fa-trash`}></i>\n              Delete Edge\n            </button>\n          </div>\n          <div className={styles.visualizeControls}>\n            <Dropdown\n              className={styles.dropdownWrapper}\n              options={algoOptions}\n              styles={optionButtonStyles.algoDropdown}\n              placeholder=\"Select Algorithm\"\n              selectedKey={selectedAlgo && selectedAlgo.key}\n              onChange={handleAlgoOptions}\n              disabled={isVisualizing}\n            />\n            <Slider\n              className={styles.speedSlider}\n              label=\"Visual Delay\"\n              styles={{\n                titleLabel: { color: \"white\" },\n                valueLabel: { color: \"white\" },\n                inactiveSection: { background: \"white\" },\n                activeSection: {\n                  backgroundImage: \"linear-gradient(45deg, #eaecff, #946cff)\",\n                },\n              }}\n              min={100}\n              max={1000}\n              step={100}\n              value={visualizationSpeed}\n              onChange={setVisualizationSpeed}\n              disabled={isVisualizing}\n            />\n          </div>\n          <div className={styles.miscellaneous}>\n            <button\n              className={styles.optionButtons}\n              onClick={() => activateOption(\"reset\")}\n              disabled={isVisualizing}\n            >\n              <i className={`${styles.icon} fas fa-undo-alt`}></i>\n              Reset\n            </button>\n          </div>\n        </div>\n        <div className={styles.visualizerProgress}>\n          {isVisualizing ? (\n            <ProgressIndicator styles={{ itemProgress: { padding: \"0\" } }} />\n          ) : (\n            <hr />\n          )}\n        </div>\n        <div className={styles.graphContainer}>\n          <Graph\n            options={options}\n            selectedAlgo={selectedAlgo}\n            selectedEdge={selectedEdge}\n            setOptions={setOptions}\n            visualizationSpeed={visualizationSpeed}\n            setVisualizingState={setVisualizingState}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport \"./App.css\";\nimport { Board } from \"./components/Board/Board\";\ninitializeIcons();\nfunction App() {\n  return <Board />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}